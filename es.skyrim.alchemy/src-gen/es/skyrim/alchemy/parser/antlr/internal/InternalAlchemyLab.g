/*
* generated by Xtext
*/
grammar InternalAlchemyLab;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package es.skyrim.alchemy.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.skyrim.alchemy.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.skyrim.alchemy.services.AlchemyLabGrammarAccess;

}

@parser::members {

 	private AlchemyLabGrammarAccess grammarAccess;
 	
    public InternalAlchemyLabParser(TokenStream input, AlchemyLabGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AlchemyLabModel";	
   	}
   	
   	@Override
   	protected AlchemyLabGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAlchemyLabModel
entryRuleAlchemyLabModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlchemyLabModelRule()); }
	 iv_ruleAlchemyLabModel=ruleAlchemyLabModel 
	 { $current=$iv_ruleAlchemyLabModel.current; } 
	 EOF 
;

// Rule AlchemyLabModel
ruleAlchemyLabModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAlchemyLabModelAccess().getEffectsEffectParserRuleCall_0_0()); 
	    }
		lv_effects_0_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlchemyLabModelRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_0_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAlchemyLabModelAccess().getIngredientsIngredientParserRuleCall_1_0()); 
	    }
		lv_ingredients_1_0=ruleIngredient		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlchemyLabModelRule());
	        }
       		add(
       			$current, 
       			"ingredients",
        		lv_ingredients_1_0, 
        		"Ingredient");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAlchemyLabModelAccess().getRecipesRecipeParserRuleCall_2_0()); 
	    }
		lv_recipes_2_0=ruleRecipe		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlchemyLabModelRule());
	        }
       		add(
       			$current, 
       			"recipes",
        		lv_recipes_2_0, 
        		"Recipe");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleIngredient
entryRuleIngredient returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIngredientRule()); }
	 iv_ruleIngredient=ruleIngredient 
	 { $current=$iv_ruleIngredient.current; } 
	 EOF 
;

// Rule Ingredient
ruleIngredient returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ingredient' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIngredientAccess().getIngredientKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIngredientAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIngredientRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIngredientAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIngredientAccess().getEffectsEffectRefParserRuleCall_3_0()); 
	    }
		lv_effects_3_0=ruleEffectRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIngredientRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_3_0, 
        		"EffectRef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='price:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIngredientAccess().getPriceKeyword_4());
    }
(
(
		lv_price_5_0=RULE_NUMBER
		{
			newLeafNode(lv_price_5_0, grammarAccess.getIngredientAccess().getPriceNUMBERTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIngredientRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"price",
        		lv_price_5_0, 
        		"NUMBER");
	    }

)
)	otherlv_6='weight:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIngredientAccess().getWeightKeyword_6());
    }
(
(
		lv_weight_7_0=RULE_NUMBER
		{
			newLeafNode(lv_weight_7_0, grammarAccess.getIngredientAccess().getWeightNUMBERTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIngredientRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"weight",
        		lv_weight_7_0, 
        		"NUMBER");
	    }

)
)(	otherlv_8='source:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIngredientAccess().getSourceKeyword_8_0());
    }
(
(
		lv_source_9_0=RULE_STRING
		{
			newLeafNode(lv_source_9_0, grammarAccess.getIngredientAccess().getSourceSTRINGTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIngredientRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"source",
        		lv_source_9_0, 
        		"STRING");
	    }

)
))?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIngredientAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='effect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEffectAccess().getEffectKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEffectAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEffectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEffectAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEffectAccess().getTypeEffectTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleEffectType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEffectRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"EffectType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEffectAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEffectAccess().getColonKeyword_5_0());
    }
(
(
		lv_description_6_0=RULE_STRING
		{
			newLeafNode(lv_description_6_0, grammarAccess.getEffectAccess().getDescriptionSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEffectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_6_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleEffectRef
entryRuleEffectRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRefRule()); }
	 iv_ruleEffectRef=ruleEffectRef 
	 { $current=$iv_ruleEffectRef.current; } 
	 EOF 
;

// Rule EffectRef
ruleEffectRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEffectRefAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEffectRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEffectRefAccess().getEffectEffectCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleRecipe
entryRuleRecipe returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecipeRule()); }
	 iv_ruleRecipe=ruleRecipe 
	 { $current=$iv_ruleRecipe.current; } 
	 EOF 
;

// Rule Recipe
ruleRecipe returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getToxicityToxicityEnumRuleCall_0_0()); 
	    }
		lv_toxicity_0_0=ruleToxicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		set(
       			$current, 
       			"toxicity",
        		lv_toxicity_0_0, 
        		"Toxicity");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRecipeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecipeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecipeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecipeAccess().getEffectsEffectRefParserRuleCall_3_0()); 
	    }
		lv_effects_3_0=ruleEffectRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecipeRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_3_0, 
        		"EffectRef");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='price:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecipeAccess().getPriceKeyword_4());
    }
(
(
		lv_price_5_0=RULE_NUMBER
		{
			newLeafNode(lv_price_5_0, grammarAccess.getRecipeAccess().getPriceNUMBERTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecipeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"price",
        		lv_price_5_0, 
        		"NUMBER");
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecipeAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRecipeAccess().getEqualsSignKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecipeRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getRecipeAccess().getIngredientsIngredientCrossReference_8_0()); 
	}

)
)(	otherlv_9='+' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRecipeAccess().getPlusSignKeyword_9_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecipeRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getRecipeAccess().getIngredientsIngredientCrossReference_9_1_0()); 
	}

)
))*)
;





// Rule EffectType
ruleEffectType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getEffectTypeAccess().getFORTIFYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEffectTypeAccess().getFORTIFYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getEffectTypeAccess().getWEAKENEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEffectTypeAccess().getWEAKENEnumLiteralDeclaration_1()); 
    }
));



// Rule Toxicity
ruleToxicity returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='potion' 
	{
        $current = grammarAccess.getToxicityAccess().getPOTIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getToxicityAccess().getPOTIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='poison' 
	{
        $current = grammarAccess.getToxicityAccess().getPOISONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getToxicityAccess().getPOISONEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '"' '^'? ('a'..'z'|'A'..'Z'|' '|'\u00E4'|'\u00C4'|'\u00F6'|'\u00D6'|'\u00DC'|'\u00FC'|'\u00DF')+ '"';

RULE_STRING : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_NUMBER : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_INT : 'this one has been deactivated';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


